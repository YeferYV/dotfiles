#!/usr/bin/env bash
#====================================== Docker run arch-ricenix ======================================#

# xhost +
# cd "$(git rev-parse --show-toplevel)"
# docker run -it \
#     --name archlinux-ricenix \
#     --ipc=host \
#     --volume=${PWD%/*}:/home/dtfls/docker-volume \
#     --volume=/run/user/1000/pipewire-0:/run/user/1000/pipewire-0 \
#     --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#     archlinux:base-devel bash -uelic '
#     [[ ! -e /home/drksl ]] && {
#         useradd -mG wheel,tty drksl
#         echo root:toor | chpasswd
#         echo drksl:toor | chpasswd
#         echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel
#         chown -R drksl:drksl /home/dtfls
#         sudo -u "drksl" bash -c "cd /home/dtfls/docker-volume/dotfiles/.local/bin && ./RiceNix"
#     }
#     chmod g+w /dev/pts/0
#     su - "drksl" bash -c "export XDG_RUNTIME_DIR=/run/user/1000 && zsh"
#     '

#===================================== Docker run ubuntu-ricenix =====================================#

# xhost +
# cd "$(git rev-parse --show-toplevel)"
# docker run -it \
#     --name ubuntu-ricenix \
#     --ipc=host \
#     --volume=${PWD%/*}:/home/dtfls/docker-volume \
#     --volume=/run/user/1000/pipewire-0:/run/user/1000/pipewire-0 \
#     --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#     ubuntu bash -uelic '
#     [[ ! -e /home/drksl ]] && {
#         apt update
#         DEBIAN_FRONTEND=noninteractive apt install -y sudo
#         useradd -mG sudo,tty drksl
#         echo root:toor | chpasswd
#         echo drksl:toor | chpasswd
#         echo "%sudo ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/sudo
#         chown -R drksl:drksl /home/dtfls
#         sudo -u "drksl" bash -c "cd /home/dtfls/docker-volume/dotfiles/.local/bin && ./RiceNix"
#     }
#     chmod g+w /dev/pts/0
#     su - "drksl" bash -c "export XDG_RUNTIME_DIR=/run/user/1000 && zsh"
#     '

#========================================== rollback layout ==========================================#

# ● home》
# ○ snapper-rollback to "appman code google-chrome wezterm whiskermenu sysclean.sh"
# ○ snapper delete old snapshots
# ○ git pull
# ○ ./RiceNix
# ○ check vscode.appimage
# ○ check google-chrome.appimage
# ○ check wezterm.appimage
# ○ check whiskermenu/sxhkd
# ○ check syscleah.sh installed packages
# ○ check /etc/apt/sources.list unstable
# ○ check apt autoremove
# ○ check neovim plugins
# ○ check systemctl .services
# ○ check audio
# ○ check brightnessctl
# ○ snapper create -d "After RiceNix(commit 137) sixelrice(commit 131)"

# ● root 》
# ○ snapper-rollback to "base base-devel broadcom-wl btrfs-progs efibootmgr fuse2 grub linux linux-firmware networkmanager snapper sudo synaptics zram-generator"
# ○ snapper delete old snapshots
# ○ check broadcom-sta-dkms
# ○ check pacman parallel downloads
# ○ check sudoers
# ○ check synaptics touchpad
# ○ check zram
# ○ git clone https://gitlab.com/yucrayeff36/sixelrice ~/.config/nvim
# ○ check neovim plugins
# ○ check nixpkgs.yazi
# ○ snapper create -d "After RiceNix(commit 137) sixelrice(commit 131)"

#================================= Post-Install: Run it inside zellij may restart gdm/lighdm =================================#

# exit on error:
set -eu

export DEBIAN_FRONTEND=noninteractive

printf "Enter sudo password to install dependencies: " && read -s PASSWORD

#---------------------------------------- Non Gui Dependencies ---------------------------------------#

install_non_gui_dependencies() {

  echo $PASSWORD | su -c "curl -L https://github.com/neovim/neovim/releases/download/v0.9.5/nvim.appimage --output /usr/local/bin/nvim && chmod +x /usr/local/bin/nvim"

	[ -e /bin/pacman ] && echo $PASSWORD | su -c "curl -L https://github.com/Jguer/yay/releases/download/v12.1.2/yay_12.1.2_x86_64.tar.gz | tar -xzf- --strip-components=1 --directory=/usr/local/bin yay_12.1.2_x86_64/yay"
  [ -e /bin/pacman ] && echo $PASSWORD | su -c "pacman -Sy --needed --noconfirm \
    base-devel \
    fuse2 \
    git \
    less \
	  xclip \
    "

  [ -e /bin/apt    ] && echo $PASSWORD | su -c "apt update -y && apt install -y \
    curl \
    file \
    libfuse2 \
    libsixel-bin \
    gcc \
    g++ \
    git \
    less \
    make \
    sudo \
    xz-utils \
	  xclip \
    "

	[ ! -e /nix ] && yes | sh <(curl -L https://nixos.org/nix/install) --daemon;
  bash --login <<'===='
    nix-env -iA \
	  bat \
    blesh \
    eza \
    fzf \
    kanata \
    lazygit \
    lf \
	  ripgrep \
	  starship \
	  stow \
    -f https://github.com/NixOS/nixpkgs/archive/149a14557b855adc35171d6a0e2a26649f02ead5.tar.gz # NixOS/nixpkgs/pull/285000/commits
====
}

#------------------------------------------ Gui Dependencies -----------------------------------------#

install_gui_dependencies() {

  # [ -e /bin/pacman ] && echo $PASSWORD | su -c "pacman -Syu --needed --noconfirm \
  #   awesome \
  #   broadcom-wl \
  #   btrfs-progs \
  #   festival-us \
  #   fakeroot \
  #   networkmanager \
  #   python-gobject \
  #   snapper \
  #   xorg-server \
  #   xorg-xinit \
  #   zram-generator \
  #   "

  [ -e /bin/pacman ] && echo $PASSWORD | su -c "pacman -S --needed --noconfirm \
    cronie \
    gtk3 \
    libnotify \
    mpv \
    pipewire-pulse \
    wget \
    xdg-user-dirs \
    xf86-input-synaptics \
    xorg-xset \
    "

  # [ -e /bin/apt    ] && echo $PASSWORD | su -c "eatmydata apt --only-upgrade full-upgrade && apt install -y
  #   awesome \
  #   broadcom-sta-dkms \
  #   btrfs-progs \
  #   festvox-us-slt-hts \
  #   network-manager \
  #   python3-gi \
  #   snapper \
  #   systemd-zram-generator \
  #   xserver-xorg \
  #   xinit \
  #   "

  [ -e /bin/apt    ] && echo $PASSWORD | su -c "apt --no-install-recommends install -y \
    cron \
    ffmpeg \
    libgtk-3-0 \
    libnotify-bin \
    mpv \
    pipewire-pulse \
    wget \
    xdg-user-dirs \
    x11-xserver-utils \
    xserver-xorg-input-synaptics \
    "

  # bash --login -c "nix-env --install     -E 'f: (import <nixpkgs> {}).mpv-unwrapped.override  { sixelSupport = true; }'" # nixpkgs doesn't support gpu
  # bash --login -c "nix-build -o /tmp/mpv -E 'with import <nixpkgs> {}; mpv-unwrapped.override { sixelSupport = true; }' && nix-env --install $(readlink /tmp/mpv) "
  [ -e /nix ] && bash --login <<'===='
    nix-env -iA \
    brightnessctl \
    devour \
    dmenu \
    fira-code-symbols \
    ghostscript \
    imagemagick \
    poppler \
    redshift \
    sxhkd \
    sxiv \
    xdo \
    xdotool \
    xdragon \
    zathura \
    -f https://github.com/NixOS/nixpkgs/archive/149a14557b855adc35171d6a0e2a26649f02ead5.tar.gz # NixOS/nixpkgs/pull/285000/commits
    # btrfs-progs \
    # efibootmgr \
    # grub2 \
    # networkmanager \
    # snapper \
    # xorg.xset \
    # zram-generator
    nix-collect-garbage -d
====

	# curl -L https://github.com/fernzi/dragdrop/releases/download/v1.1.0/DragDrop-1.1.0-x86_64.AppImage -o ~/.local/bin/dragon-drop && chmod +x ~/.local/bin/dragon-drop
	curl -L https://raw.githubusercontent.com/ivan-hc/AM-Application-Manager/main/APP-MANAGER            -o ~/.local/bin/appman      && chmod +x ~/.local/bin/appman && mkdir -p ~/.config/appman && echo ".local/appimage" > ~/.config/appman/appman-config
  [ -e ~/.local/appimage ]  && echo "skipping appman install ..." || ~/.local/bin/appman install \
    code \
    google-chrome \
    wezterm

}

#------------------------------------------ Packages Snapshot ----------------------------------------#

install_snapshot(){

  if [ -e /bin/apt ]; then

    echo $PASSWORD | su -c "apt-mark minimize-manual -y"
    echo $PASSWORD | su -c "apt autoremove -y"
    apt-mark showmanual > apt-snapshot.list

  else

    echo $PASSWORD | su -c "yes | pacman -Scc"
    pacman -Qqe > pacman-snapshot.list

  fi

}

#---------------------------------------------- User Configs ---------------------------------------------#

install_dotfiles() {

  # Symlinks:
  cd "$(git rev-parse --show-toplevel)"
  mkdir -p "$HOME"/.config
  mkdir -p "$HOME"/.local
  bash --login -c "stow --restow --verbose --target=$HOME/.config .config"
  bash --login -c "stow --restow --verbose --target=$HOME/.local  .local"
  ln -sf "$HOME"/.config/shell/.bashrc   "$HOME"/.bash_profile
  ln -sf "$HOME"/.config/shell/.bashrc   "$HOME"/.bashrc
  ln -sf "$HOME"/.config/shell/.profile  "$HOME"/.profile
  ln -sf "$HOME"/.config/shell/.xprofile "$HOME"/.xprofile

  # Services:
  [ -e /bin/apt    ] && sudo systemctl enable --now cron
  [ -e /bin/pacman ] && sudo systemctl enable --now cronie
  sudo systemctl enable --now NetworkManager
  systemctl --user enable --now pipewire-pulse
  echo $PASSWORD | su -c "[ -e /etc/X11/xorg.conf.d ]   && mv /etc/X11/xorg.conf.d /etc/X11/xorg.conf.d.synapticsconflicts"
  echo $PASSWORD | su -c "mkdir -p /etc/X11/xorg.conf.d && cp .config/shell/10-synaptics.conf /etc/X11/xorg.conf.d"
  echo $PASSWORD | su -c "echo '%sudo ALL=(ALL:ALL)  NOPASSWD: ALL' > /etc/sudoers.d/sudo"
  echo $PASSWORD | su -c "echo '%wheel ALL=(ALL:ALL) NOPASSWD: ALL' > /etc/sudoers.d/wheel"
  command -v crontab                                    && crontab ~/.local/bin/cron/lowbatnotificationcron

  # GWSL:
  # echo "export LIBGL_ALWAYS_INDIRECT=1"        >>"$HOME"/.bash_profile
  # echo "export DISPLAY=localhost:0.0"          >>"$HOME"/.bash_profile
  # echo "export PULSE_SERVER=tcp:localhost"     >>"$HOME"/.bash_profile
  # echo "export XDG_RUNTIME_DIR=/run/user/1000" >>"$HOME"/.bash_profile

  # Blacklist Beep:
  # xset b off
  # sudo rmmod pcspkr
  # echo "blacklist pcspkr" | sudo tee /etc/modprobe.d/nobeep.conf

}

#------------------------------------------------ main -----------------------------------------------#

install_non_gui_dependencies  || ( echo $(tput -T ansi setaf 1) install_non_gui_dependencies failed && exit 1; )
install_gui_dependencies      || ( echo $(tput -T ansi setaf 1) install_gui_dependencies failed     && exit 1; )
install_snapshot              || ( echo $(tput -T ansi setaf 1) install_snapshot failed             && exit 1; )
install_dotfiles              || ( echo $(tput -T ansi setaf 1) install_dotfiles failed             && exit 1; )

printf "\e[1;32m ln -sf ~/.config/shell/.xprofile ~/.xsessionrc #if lightDM (xfce) \e[0m\n"
printf "\e[1;32m Done! \e[0m\n"
