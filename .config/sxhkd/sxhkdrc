#
# reopen/reload
#

# terminal emulator
super + {_, shift, alt, shift + alt } + Return
	{ \
	  wezterm --config initial_rows=32 --config initial_cols=135; \
	, wezterm --config initial_rows=25 --config initial_cols=85; \
	, wezterm --config "window_decorations='NONE'" ; \
  , wezterm --config window_background_opacity=0.0 --config text_background_opacity=0.3; \
	}

# dunst close/reopen notification
ctrl + {_, shift } + Escape
	dunstctl {close, history-pop}

# stop cronbat
super + Escape
  ps aux | grep cronbat | awk '\{print $2\}' | xargs kill -9 & dunstctl close

# make sxhkd reload its configuration files:
super + shift + Escape
	pkill -USR1 -x sxhkd

#
# windows flags/state
#

# xdo close
super + x
	xdo close

# toggle fullscreen
super + control + f; {f, shift + f}
  xdotool windowstate --{add,remove}=FULLSCREEN $(xdo id)

# toggle maximized window
super + control + f; m
  xdotool windowstate --toggle=MAXIMIZED_HORZ $(xdo id); \
  xdotool windowstate --toggle=MAXIMIZED_VERT $(xdo id);

#
# Rofi
#

# rofi alt-tab like
super + Tab
  N=$((xdo id -D & xdo id -d) | wc -w); \
  [ $N -le 5 ]&& export RWIDTH="$((N * 20))%" RHEIGHT=33%; \
  [[ 6 -le $N && $N -le 10 ]]&& export RHEIGHT=66%; \
  rofi \
    -show window -window-thumbnail -show-icons -theme Monokai \
    -kb-accept-entry "!Super-Tab,!Super_L,!Super+Super_L,Return" \
    -kb-row-right "Super+Tab,Super+l" \
    -kb-row-up "Super+k" \
    -kb-row-down "Super+j" \
    -kb-row-left "Super+ISO_Left_Tab,Super+h"& \
  xdotool keyup Tab; \
  xdotool key Tab

# rofi drun (dmenu for .desktop apps)
super + control + r; d
  A='rofimoji --action clipboard copy print --files fontawesome nerd_font gitmoji emojis latin-1'; \
  COL=10 \
  ICON=10% \
  ENTRY=true \
  SWITCHER=true \
  XDG_DATA_DIRS=$HOME/.nix-profile/share:/usr/local/share:/usr/share:$HOME/.local/share:$XDG_DATA_DIRS \
  rofi -modi "window,run,drun,emoji:$A,ssh" -show drun -theme Monokai

# rofi emoji
super + control + r; {e, shift + e}
  LOCALE_ARCHIVE=/lib/locale/locale-archive \
  rofimoji \
    --action clipboard copy print \
    { \
      --selector-args="-theme Monokai" \
      --files fontawesome nerd_font gitmoji emojis latin-1 \
    , --selector-args="-theme Monokai -theme-str 'window \{width:90%; height:50%;\}' " \
      --files all \
    }

# rofi focus last window
super + control + r; semicolon
  RHEIGHT=33% \
  LOCALE_ARCHIVE=/lib/locale/locale-archive \
  rofi \
    -show window  -window-thumbnail -show-icons \
    -kb-cancel "Escape" \
    -kb-accept-entry "!space,Return" \
    -selected-row 1; \
  xdotool search --sync --class Rofi key --delay 0 --clearmodifiers space;

#
# swap/focus window
#

# focus/send to the given desktop
super + {_, shift +} {1-9,0,minus,equal}
	xdotool {set_desktop, getactivewindow set_desktop_for_window} '{0-9,10,11,12}'

# xdo focus last window
super + {semicolon,grave}
  WINID=$(xdo id | tr '[:upper:]' '[:lower:]' | sed -r 's/^0x0+/0x/g'); \
  WINDOWS=($(xprop -root _NET_CLIENT_LIST_STACKING | cut -d"#" -f2 | tr "," " " | sed -r "s/$WINID.*//g")); \
  xdo activate $\{WINDOWS[-1]\}
  # IDS=($((xdo id -D; xdo id -d) | tr "\n" " ")) && xdo activate $\{IDS[-2]\}

# focus relative desktop
super + {h,l}
	xdotool set_desktop --relative -- {-1,1}

# focus relative desktop
super + {s,f}
	xdotool set_desktop --relative -- {-1,1}

# swap relative desktop
super + shift + {s,f}
  { sign="-", sign="+" }; \
  xdotool getactivewindow set_desktop_for_window $(($(xdotool get_desktop) $sign 1)) && xdotool set_desktop --relative -- "$sign"1

#
# Toggles
#

# toggle borderless window/node
super + control + t; n
  borderless toggle

#
# move/resize windows
#

# increase/decrease window size (zoom in/out)
super + control + w; {minus,plus}
  DECORATION_SIZE=$(xprop -id $(xdo id) | awk '/_NET_FRAME/ \{ print $5 \}' | awk -F',' '\{ print $1\}'); \
  BORDER_SIZE=$(xprop -id $(xdo id) | awk '/_NET_FRAME/ \{ print $4 \}' | awk -F',' '\{ print $1\}'); \
	{ \
	  xdotool getactivewindow windowmove --relative -- -$((50 + BORDER_SIZE)) -$((25 + DECORATION_SIZE)) ; xdo resize -w +100 -h +50; \
	, xdotool getactivewindow windowmove --relative -- +$((50 - BORDER_SIZE)) +$((25 - DECORATION_SIZE)) ; xdo resize -w -100 -h -50; \
	}

# hover window to left/down/up/right
super + control + w; {h,j,k,l}
  xprop -id $(xdo id) | awk -F',' '/_NET_FRAME/ \{print $2" "$3\}' | read B D;\
  xprop -root _NET_WORKAREA  | awk -F ',' '\{print $2\}' | xargs -I var echo "(var + 1)/2" | bc | read S;\
  xdotool getdisplaygeometry | awk '\{print $1" "$2\}' | read W H;\
	{ \
    w=$((W / 2 - 1)); h=$H; x=0; y=0;\
  , w=$W; h=$((H / 2 - S - D)); x=0; y=$((H / 2 + S));\
  , w=$W; h=$((H / 2 - S - D)); x=0; y=0;\
  , w=$((W / 2    )); h=$H; x=$((W / 2)); y=0;\
	} \
  xdo resize -w $w -h $h; xdo move -x $x -y $y

# move floating window by 10px
super + control + w; shift + {h,j,k,l}
  DECORATION_SIZE=$(xprop -id $(xdo id) | awk '/_NET_FRAME/ \{ print $5 \}' | awk -F',' '\{ print $1\}'); \
  BORDER_SIZE=$(xprop -id $(xdo id) | awk '/_NET_FRAME/ \{ print $4 \}' | awk -F',' '\{ print $1\}'); \
  xdotool getactivewindow windowmove --relative -- \
  { \
     $((-10 - BORDER_SIZE)) -$DECORATION_SIZE ; \
  , -$BORDER_SIZE $((-DECORATION_SIZE + 10)) ; \
  , -$BORDER_SIZE $((-DECORATION_SIZE - 10)) ; \
  ,  $((10 - BORDER_SIZE)) -$DECORATION_SIZE ; \
  }


# hover window to corner
super + control + w; {Left, Down, Up, Right}
  xprop -id $(xdo id) | awk -F',' '/_NET_FRAME/ \{print $2" "$3\}' | read BORDER DECORATION; \
  xdotool getwindowfocus getwindowgeometry | awk -F'x' '/Geometry/ \{print $1" "$2\}' | read G W H; \
  xdotool getdisplaygeometry | awk '\{print $1" "$2\}' | read W_SCREEN H_SCREEN; \
  xdotool getactivewindow windowmove --relative -- -$((BORDER + BORDER)) -$((DECORATION + DECORATION)) &&\
  xdotool getactivewindow windowmove \
	{ \
		0% y; \
	, x $((H_SCREEN - H - DECORATION)); \
	, x 0%; \
	, $((W_SCREEN - W - BORDER - BORDER)) y; \
	}

# xdo fixedscreen 75%/50% (small/medium)
super + control + w; {s,m}
  xprop -id $(xdo id) | awk -F',' '/_NET_FRAME/ \{print $2" "$3\}' | read B D;\
  xprop -root _NET_WORKAREA  | awk -F ',' '\{print $2\}' | xargs -I var echo "(var + 1)/2" | bc | read S;\
  xdotool getdisplaygeometry | awk '\{print $1" "$2\}' | read W H;\
  { \
    xdo resize -w $((W / 2 - B)) -h $((H / 2 - S - D)); \
  , xdotool getactivewindow windowsize 75% 75%; \
  }

# xdo fixedscreen 1366x768 (min-max window)
super + control + w; {m, shift + m}
  xdotool windowstate --toggle=MAXIMIZED_VERT $(xdo id); \
  { \
	  borderless disable; xdotool getactivewindow windowsize 100% y windowmove 0% 0%; \
	, borderless enable; xdotool getactivewindow windowsize 100% y windowmove 0% 0%; \
  }

#
# Smart resize
#

# increase/expand/grow window edges by 10px
super + {Left,Down,Up,Right}
  xprop -id $(xdo id) | awk -F',' '/_NET_FRAME/ \{print $2" "$3\}' | read BORDER DECORATION; \
	{ \
    xdotool getactivewindow windowmove --relative -- $((-10 - BORDER)) -$DECORATION; xdo resize -w +10; \
  ,                                                                                  xdo resize -h +10; \
  ,	xdotool getactivewindow windowmove --relative -- -$BORDER $((-DECORATION - 10)); xdo resize -h +10; \
  ,                                                                                  xdo resize -w +10; \
	}

# decrease/contract/shrink window edges by 10px
super + shift + {Left,Down,Up,Right}
  xprop -id $(xdo id) | awk -F',' '/_NET_FRAME/ \{print $2" "$3\}' | read BORDER DECORATION; \
	{ \
    xdotool getactivewindow windowmove --relative --  $((10 - BORDER)) -$DECORATION; xdo resize -w -10; \
	,                                                                                  xdo resize -h -10; \
  , xdotool getactivewindow windowmove --relative -- -$BORDER $((-DECORATION + 10)); xdo resize -h -10; \
	,	                                                                                 xdo resize -w -10; \
	}

########################################
###      alphabetic_hotkeys          ###
#######################################

# super volume
super + XF86Audio{Raise,Lower}Volume
  pactl set-sink-volume @DEFAULT_SINK@ {+,-}5%

# volume
XF86Audio{Raise,Lower}Volume
  pactl set-sink-volume @DEFAULT_SINK@ {+,-}2%

# (un)mute audio
XF86AudioMute
  pactl set-sink-mute @DEFAULT_SINK@ toggle

# (un)mute mic
XF86AudioMicMute
  pactl set-source-mute @DEFAULT_SOURCE@ toggle

# backlight
XF86MonBrightness{Down,Up}
  brightnessctl set 1{-,+}

# super backlight
super + XF86MonBrightness{Down,Up}
  brightnessctl set 5%{-,+}

# dimmer
shift + XF86MonBrightness{Down,Up}
  xcalib {-co 75 -a,-c}

# dmenu(u)mount
super + {F11,F12}
  {dmenumount,dmenuumount}

# chromium next-toggle-prev
super + KP_{Right,Begin,Left}
  playerctl --player=chromium {next,play-pause,previous}

# mpv next-toggle-prev
alt + KP_{Right,Begin,Left}
  playerctl --player=mpv {next,play-pause,previous}

# mpv vol (down,up)
alt + KP_{Down,Up}
	{ \
	  playerctl --player=mpv volume 0.1-; \
	, [[ "$(playerctl -p mpv volume)" < 1 ]]&& playerctl --player=mpv volume 0.1+; \
	}

# mpc next-toggle-prev-vol
KP_{Right,Begin,Left,Down,Up}
  mpc {next,toggle,prev,volume -2,volume +2} # --port=6601

# screenshot (fullscreen,_)
{Print, super + Print}
	maimpick {fullscreen,_}

# compositor wallpaper background
super + control + c; w
	{\
		picom --transparent-clipping \
		      --shadow-radius=10 \
		      --shadow-opacity=0.9 \
		      --shadow-offset-x=-10 \
		      --shadow-offset-y=-15 \
          --frame-opacity=0.5 \
          --fade-delta=0 \
          # --inactive-dim=0.2 \
          # --active-opacity=0.95 \
          # --inactive-opacity=1.0 \
          # --refresh-rate 30\
				  ,\
    killall picom\
	}

# compositor blur background
super + control + c; b
	{ \
	  picom --blur-method="dual_kawase" \
	        --backend="glx" \
	        --opacity-rule="70:class_g *= 'neovide'" \
	        --opacity-rule="70:class_g *= 'wezterm'" \
	        --fade-delta=0 \
	        # --inactive-dim=0.2 \
				  ,\
	  killall picom \
	}

# compositor keep background
super + control + c; b
	{picom --fade-delta=0, killall picom}

# compositor no shadow
super + control + c; s
	{picom --shadow-opacity=0 --transparent-clipping --fade-delta=0, killall picom}

# compositor decrease/increase transparency (picom-trans requires xorg-xwininfo)
super + control + c; {minus,equal}
  xdo id -d -c | xargs -I id -n 1 picom-trans -w id {-2,+4}
  # bspc query -N -d | xargs -I id -n 1 picom-trans -w id {-2,+4}
  # xdo pid $ID  		# xdotool getactivewindow getwindowpid
  # xdo id -p $PID  # xdotool getactivewindow

# night light
super + control + n; {1,2,3,4,5}
  redshift {-x, -O 2222, -O 3333, -O 4444, -O 5555}

# toggle terminal background
super + control + p; t
  (printf "\x1b]11;{#0c0c0c,#000000}\x1b\\\\") > $(find /dev/pts -iname '[0-9]')

# pywal offline wallpaper
super + control + p; o
  wal --cols16 -s -e -i { "$HOME/bgs/bgi/eyelust/eyelust", "/tmp/pywal" } -o ~/.config/wal/postrun

# pywal online wallpaper
super + control + p; {w,r}
  { curl -s "https://wallhaven.cc/api/v1/search?sorting=toplist&page=$(shuf --head-count=1 --input-range=1-10)" | jq ".data[$(shuf --head-count=1 --input-range=1-24)].path" | xargs curl -LO --output-dir /tmp/pywal --create-dirs;\
  , curl -H "User-agent: 'your bot 0.1'" "https://www.reddit.com/r/wallpaper.json?limit=100" | jq ".data.children[$(shuf --head-count=1 --input-range=1-100)].data.url_overridden_by_dest" | xargs curl -LO --output-dir /tmp/pywal --create-dirs;\
  } wal --iterative --cols16 -s -i /tmp/pywal;
  # curl -s "https://wallhaven.cc/api/v1/search?sorting=random&q=4k" | jq '.data[0].path' | xargs curl -LO --output-dir /tmp/pywal --create-dirs; \

# dmenu launcher
super + {_, shift} + p
	{ \
		dmenu_run; \
	, wezterm start $(dmenu_path | dmenu); \
	}

# browser
super + {_, shift} + w
  { google-chrome-stable --process-per-tab || google-chrome --process-per-tab, killall chrome}
  # { google-chrome-stable --process-per-site, killall chrome}
