# v1m:ft=cfg

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'
set shell /bin/bash

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

set hidden true
set icons
set mouse true
set period 1
set ratios 1:2
set scrolloff 50
set cursoractivefmt  "\033[40m" # "\033[7m\033[30m\033[46m"
set cursorparentfmt  "\033[40m" # "\033[7m\033[30m\033[46m"
set cursorpreviewfmt "\033[40m" # "\033[7m\033[30m\033[46m"
set promptfmt        "[1;90m%w "
set previewer        ~/.config/lf/lf-wiki-previewer/lf_kitty_preview
set cleaner          ~/.config/lf/lf-wiki-previewer/lf_kitty_clean
# set previewer      ~/.config/lf/lf-wiki-previewer/lf_sixel_preview
# set cleaner        ~/.config/lf/lf-wiki-previewer/lf_sixel_clean

# $lf -remote "send $id set previewer '$HOME/.config/lf/previewer'"
# $lf -remote "send $id set cleaner   '$HOME/.config/lf/cleaner'"

#######################
##  Global_keymaps  ##
#####################

cmd bm-dirs                $ lf -remote "send $id cd $(awk '{ gsub(/#.*/, ""); } !/^$/ { print $2 }' $HOME/.config/shell/bm-dirs | fzf | sed 's/\${.*-// ; s/}//' | envsubst)"
cmd draganddrop            & dragon-drop -a -x $fx
# cmd duplicatelf          & nohup sh -c "export LF_CD=true && $TERMINAL"                 >/dev/null 2>&1
# cmd duplicatelf          & nohup                             $TERMINAL -e "lf"          >/dev/null 2>&1
# cmd duplicateterm        $ nohup                             $TERMINAL start --cwd=$PWD >/dev/null 2>&1
cmd duplicatelf            & setsid -f env LF_CD=true          $TERMINAL start --cwd=$PWD
cmd duplicateterm          & setsid -f                         $TERMINAL start --cwd=$PWD
cmd mediainfo              $ mediainfo $f | less
cmd fzf_filemanager        $ ~/.config/lf/fmz-img/fmz
cmd fzf_preview_ueberzug   $ ~/.config/lf/fmz-img/fzf_ueberzug
cmd ueberzug_image         $ ~/.config/lf/fmz-img/img 0 0 $(tput cols) $(tput lines) $f
# cmd mkdir                $ mkdir  -p "$(echo $* | tr ' ' '\ ')"
# cmd touch                $ touch     "$(echo $* | tr ' ' '\ ')"
# cmd trash-onefile        $ mkdir -p $HOME/.cache/Trash    && mv $f "$HOME/.cache/Trash/$(basename $f)-$(date '+%y%m%d-%H-%M-%S')"

# /etc/zsh/zprofile may overwrite tmux $PATH
cmd mpv_in_tmux_detach     $ tmux detach -E                                 "mpv --vo=sixel,kitty,x11 --quiet $fx && tmux attach-session"
cmd mpv_in_tmux_popup      $ tmux popup -w 110 -h 30 -x 60 -y 1 -E          "mpv --vo=tct $fx"
# cmd mpv_in_tmux_split    $ tmux split-window -h \; send-keys              "mpv --vo=sixel,kitty,x11 --quiet --pause $fx && exit" 'Enter'
# cmd mpv_in_tmux_window   $ tmux new-window      \; send-keys              "mpv --vo=sixel,kitty,x11 --quiet --pause $fx && exit" 'Enter'
cmd mpv_in_wezterm_pane    $ wezterm cli split-pane --horizontal -- bash -c "mpv --vo=kitty,sixel,x11 --quiet $fx"
cmd mpv_in_wezterm_tab     $ wezterm cli spawn                   -- bash -c "mpv --vo=kitty,sixel,x11 --quiet $fx"
cmd kitty_web_browser      $ wezterm cli split-pane --horizontal -- bash -c "awrit \"file://$f\""

cmd one_column   ${{ lf -remote "send $id :set nopreview; set ratios 1" }}
cmd two_column   ${{ lf -remote "send $id :set ratios 1:2; set preview"  }}
cmd three_column ${{ lf -remote "send $id :set ratios 1:2:3; set preview"  }}

# Ranger's open_with (it will execute if no arguments):
cmd shell-open-with        $ $@   $fx
cmd shell-pipe-open-with   % "$@" $fx
cmd shell-wait-open-with   ! $@   $fx
cmd shell-async-open-with  & $@   $fx

cmd cmd_scrolldown &{{
	# Retrieve the current preview offset.
	offset="$(cat "$LF_SCROLLINGPREVIEW_TEMPDIR/offset")"

	# Increment the offset.
	echo "$((offset+1))" >"$LF_SCROLLINGPREVIEW_TEMPDIR/offset"

	# Trigger a reload.
	lf -remote "send $id reload"
}}

cmd cmd_scrollup &{{
	offset="$(cat "$LF_SCROLLINGPREVIEW_TEMPDIR/offset")"
	if [ "$offset" -gt 1 ]; then
		echo "$((offset-1))" >"$LF_SCROLLINGPREVIEW_TEMPDIR/offset"
	fi
	lf -remote "send $id reload"
}}

cmd cmd_redraw_down :{{
	$(echo 1 >"$LF_SCROLLINGPREVIEW_TEMPDIR/offset")
  down
  redraw
  $lf -remote "send $id reload"
  # $lf -remote "send $id down && send $id redraw"
  %wc -l "$fx"
}}

cmd cmd_redraw_up :{{
	$(echo 1 >"$LF_SCROLLINGPREVIEW_TEMPDIR/offset")
  up
  redraw
  $lf -remote "send $id reload"
  # $lf -remote "send $id up && send $id redraw"
  %wc -l "$fx"
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
  dest="$(awk '{ gsub(/#.*/, ""); } !/^$/ { print $2 }' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
  dest="$(awk '{ gsub(/#.*/, ""); } !/^$/ { print $2 }' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
  stty echo
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd fzf_preview ${{
    # fzf with lf images preview like keybinding
    export FZF_DEFAULT_COMMAND='rg --files -g "!.git/" --hidden'
    export FZF_PREVIEWER="$HOME/.config/lf/${1}"
    fzf --bind='alt-j:down+execute-silent(                 (tput sc; tput cup 2 $(tput cols) ;              wezterm imgcat --width $(   tput cols    ) {}; tput rc;    read) >/dev/tty)'\
        --bind='alt-k:up+execute-silent(                   (tput sc; tput cup 2 $(tput cols) ;              wezterm imgcat --width $(   tput cols    ) {}; tput rc;    read) >/dev/tty)'\
        --bind='alt-i:refresh-preview+down+execute-silent( (tput sc; tput cup 2 $(tput cols) ;              img2sixel      --width $(($(tput cols)*8)) {}; tput rc;    read) >/dev/tty)'\
        --bind='alt-o:refresh-preview+up+execute-silent(   (tput sc; tput cup 2 $(tput cols) ;              img2sixel      --width $(($(tput cols)*8)) {}; tput rc;    read) >/dev/tty)'\
        --bind='alt-u:execute(                             (                                                img2sixel      --width $(($(tput cols)*7)) {} </dev/tty && read) >/dev/tty)'\
        --bind='alt-p:execute(                              wezterm cli split-pane --horizontal -- bash -c "img2sixel      --width $(($(tput cols)*4)) {}           && read"          )'\
        --bind='alt-?:execute(                              notify-send "$TTY - $COLUMNS - $LINES" < /dev/tty)'\
        --bind='ctrl-j:clear-screen+refresh-preview+down'\
        --bind='ctrl-k:clear-screen+refresh-preview+up'\
        --bind='down:clear-screen+refresh-preview+down'\
        --bind='up:clear-screen+refresh-preview+up'\
        --bind='ctrl-i:preview-down'\
        --bind='ctrl-o:preview-up'\
        --bind='ctrl-u:preview-half-page-up'\
        --bind='ctrl-d:preview-half-page-down'\
        --bind='ctrl-t:preview-top'\
        --bind='ctrl-b:preview-bottom'\
        --bind='ctrl-p:execute(less -f {} < /dev/tty > /dev/tty)'\
        --bind='?:toggle-preview'\
        --preview='$FZF_PREVIEWER {}'\
        --preview-window 'right,50%,border-left' \
    | xargs -I_ lf -remote "send $id select '_'"
  }}

# https://github.com/junegunn/fzf/blob/master/ADVANCED.md#switching-between-ripgrep-mode-and-fzf-mode
cmd fzf_ripgrep ${{
    # Switch between Ripgrep launcher mode (CTRL-R) and fzf filtering mode (CTRL-F)
    RG_PREFIX="rg --column --glob='!.git/' --hidden --line-number --no-heading --color=always --smart-case"
    INITIAL_QUERY="${*:-}"
    IFS=: read -ra selected < <(
      FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY")" \
      fzf --ansi \
          --color "hl:-1:reverse,hl+:-1:reverse,bg+:#111111" \
          --disabled --query "$INITIAL_QUERY" \
          --bind="change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
          --bind="ctrl-f:unbind(change,ctrl-f)+change-prompt(2. fzf> )+enable-search+clear-query+rebind(ctrl-r)" \
          --bind="ctrl-r:unbind(ctrl-r)+change-prompt(1. ripgrep> )+disable-search+reload($RG_PREFIX {q} || true)+rebind(change,ctrl-f)" \
          --bind='ctrl-i:preview-down'\
          --bind='ctrl-o:preview-up'\
          --bind='ctrl-u:preview-half-page-up'\
          --bind='ctrl-d:preview-half-page-down'\
          --bind='ctrl-t:preview-top'\
          --bind='ctrl-b:preview-bottom'\
          --bind='ctrl-p:execute(less -f {1} < /dev/tty > /dev/tty)'\
          --prompt '1. Ripgrep> ' \
          --delimiter : \
          --header 'â•± CTRL-R (Ripgrep mode) â•± CTRL-F (fzf mode) â•±' \
          --preview 'bat --color=always {1} --highlight-line {2}' \
          --preview-window 'up,60%,border-bottom,+{2}+3/3,~3'
    )
    [ -n "${selected[0]}" ] && lf -remote "send $id select \"${selected[0]}\""
    [ -n "${selected[0]}" ] && nvim       "${selected[0]}" "+${selected[1]}"
  }}

cmd move_to_trash ${{
  mkdir -p $HOME/.cache/Trash
  basename -a $fx | xargs -I var mv var "$HOME/.cache/Trash/var-$(date '+%y%m%d-%H-%M-%S')"
}}

# cmd on-quit ${{ ( $LFCD ) 2>/dev/null && unset LFCD && cd $PWD && zsh }} # open shell
cmd on-cd &{{
    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty

    # Show current directory in window title with last path instead of full path
    printf "\033]0;$(TMP=${PWD/#$HOME/\~};echo ${TMP##*/})\007" > /dev/tty
}}
# also run at startup
# on-cd

cmd open ${{
    #"sudo -E env "PATH=$PATH" lf" https://unix.stackexchange.com/questions/83191/how-to-make-sudo-preserve-path
    case $(file --dereference --brief --mime-type $f) in
        text/*|*/json|*/javascript)  printf "\033]0; ${f##*/} \007" > /dev/tty; $EDITOR $fx ;;
	      image/*)                     basename -a $fx | $SWALLOWER sxiv -baio ;;
	      audio/*)                     basename -a $fx | $SWALLOWER mpv --vo=x11,sixel,kitty --force-window --playlist=- ;;
	      video/*)                     basename -a $fx | $SWALLOWER mpv --vo=x11,sixel,kitty --playlist=- ;;
        application/pdf)                               $SWALLOWER zathura $fx ;;
        #*) for f in $fx; do xdg-open $f           &>/dev/null &;;
        *)  for f in $fx; do setsid -f $OPENER $f   >/dev/null 2>&1; done;;
    esac
}}

cmd setbg ${{
  # ln -sf $fx ~/.local/share/bg
  cp -f $fx ~/.local/share/bg
  (command -v wal) && wal --cols16 -s -i $fx -o ~/.config/wal/postrun || ( xwallpaper --zoom "$HOME/.local/share/bg" & disown )
}}

cmd tmuxtty ${{
  # stty echo
  ( exec </dev/tty; exec <&1; TMUX= tmux new $1 )
}}

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -rv $1.zip $1
    rm -rf $1
}}

# Bindings
# map <m-1> ???
map <m-2>   : updir
map <m-3>   : open

map <a-j>   : down; redraw; &[[ $f =~ .png|.jpg ]] && (tput cup 1 55 && wezterm imgcat --width 50% $f) >/dev/tty &
map <a-k>   : up;   redraw; &[[ $f =~ .png|.jpg ]] && (tput cup 1 55 && wezterm imgcat --width 50% $f) >/dev/tty &

map <c-j>     cmd_redraw_down
map <c-k>     cmd_redraw_up
map <tab>     cmd_scrolldown #<c-i>
map <backtab> cmd_scrollup
map <c-o>     cmd_scrollup

map <enter> shell
map a       rename # at the very end
map A       push a<c-u> # new rename
map b       setbg $f
map B     $ vidir $fx
map D       move_to_trash
map g1      one_column
map g2      two_column
map g3      three_column
map gbd     bm-dirs
map gdt     duplicateterm
map gdl     duplicatelf
map gdd     draganddrop
map gff     fzf_filemanager                    # fzf file manager (stpv for preview)
map gfi     ueberzug_image                     # ueberzug image
map gfk     fzf_preview "./fmz-img/fzf_kitty"  # fzf kitty preview
map gfr     fzf_ripgrep                        # fzf ripgrep
map gfs     fzf_preview "./fmz-img/fzf_sixel"  # fzf sixel preview
map gfu     fzf_preview_ueberzug               # fzf ueberzug preview
map gii     mediainfo
map gll   $ lazygit
map gsg   $ $SWALLOWER mpv --vo=gpu $fx
map gsc   $ $SWALLOWER code $fx
map gsl   $ $SWALLOWER libreoffice --nologo $fx
map gsn   $ $SWALLOWER neovide $fx
map gSo     shell-open-with
map gSw     shell-wait-open-with
map gSa     shell-async-open-with
map gSp     shell-pipe-open-with
map gtl     tmuxtty lf
map gtz     tmuxtty zsh
map gwf     awrit_kitty_web_browser
map J       push 10j
map K       push 10k

map i     $ LESSOPEN='| ~/.config/lf/lf-wiki-previewer/lf_sixel_preview %s' bat --pager "less -R" --paging always --wrap never $fx
map I     $ LESSOPEN='| ~/.config/lf/lf-wiki-previewer/lf_sixel_preview %s' less -R $f
map o     & mimeopen $fx >/dev/null 2>&1                           #'setsid -f' unneeded
map O     & wezterm cli split-pane -- bash -c "mimeopen --ask $fx" #'setsid -f' breaks prompt

map M
map Mk    $ mpv --vo=kitty --really-quiet $fx
map Ms    $ mpv --vo=sixel --really-quiet $fx
map Mt    $ mpv --vo=tct   --really-quiet $fx
map Md      mpv_in_tmux_detach
map Mp      mpv_in_tmux_popup
map MP      mpv_in_wezterm_pane
map MT      mpv_in_wezterm_tab
map S     $ zsh
map X       extract
map Y     $ printf "%s" "$fx" | xclip -selection clipboard
map Z       push :zip<space>
