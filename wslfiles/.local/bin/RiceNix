#!/usr/bin/env bash

#================== Docker run arch-ricenix ==================#

# cd "$(git rev-parse --show-toplevel)"
# docker run -it \
#            --name arch-ricenix \
#            --privileged \
#            --volume=${PWD%/*}:/home/dtfls/winfiles-docker-volume \
#            --volume=/run/user/1000/pipewire-0:/run/user/1000/pipewire-0 \
#            --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#            archlinux:base-devel \
#            bash -uelic '
#              if [ ! -e /home/drksl ]; then
#                pacman-key --init
#                pacman-key --populate
#                pacman -Sy  --noconfirm archlinux-keyring
#                pacman -Syu --noconfirm sudo
#                useradd -mG wheel,tty drksl
#                tty >> /tmp/sixel-
#                echo root:toor | chpasswd
#                echo drksl:toor | chpasswd
#                echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel
#                mkdir -p /home/drksl/.config/dotfiles
#                cp -r /home/dtfls/winfiles-docker-volume/winfiles /home/drksl/.config/dotfiles/winfiles
#                chown -R drksl:drksl /home/drksl/.config
#                chown -R drksl:drksl /home/dtfls
#                chown -R drksl:drksl /run/user/1000
#                sudo -u "drksl" bash -c "cd ~/.config/dotfiles/winfiles/wslfiles/.local/bin && ./RiceNix"
#              else
#                reset
#              fi
#              chmod g+w /dev/pts/0
#              stty rows $(tput lines) && stty cols $(tput cols) && stty sane
#              su - "drksl" bash -c "export XDG_RUNTIME_DIR=/run/user/1000 && script -qI /dev/null"
#            '

#================= Docker run ubuntu-ricenix =================#

# cd "$(git rev-parse --show-toplevel)"
# docker run -it \
#            --name ubuntu-ricenix \
#            --privileged \
#            --volume=${PWD%/*}:/home/dtfls/winfiles-docker-volume \
#            --volume=/run/user/1000/pipewire-0:/run/user/1000/pipewire-0 \
#            --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#            ubuntu:devel \
#            bash -uelic '
#              if [ ! -e /home/drksl ]; then
#                apt update
#                DEBIAN_FRONTEND=noninteractive apt install -y sudo
#                useradd -mG sudo,tty drksl
#                tty >> /tmp/sixel-
#                echo root:toor | chpasswd
#                echo drksl:toor | chpasswd
#                echo "%sudo ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel
#                sed -i "s/Defaults/#Defaults/g" /etc/sudoers
#                mkdir -p /home/drksl/.config/dotfiles
#                cp -r /home/dtfls/winfiles-docker-volume/winfiles /home/drksl/.config/dotfiles/winfiles
#                chown -R drksl:drksl /home/drksl/.config
#                chown -R drksl:drksl /home/dtfls
#                chown -R drksl:drksl /run/user/1000
#                sudo -u "drksl" bash -c "cd ~/.config/dotfiles/winfiles/wslfiles/.local/bin && ./RiceNix"
#              else
#                reset
#              fi
#              chmod g+w /dev/pts/0
#              stty rows $(tput lines) && stty cols $(tput cols) && stty sane
#              su - "drksl" bash -c "export XDG_RUNTIME_DIR=/run/user/1000 && script -qI /dev/null"
#            '

#================== Docker run nixos-ricenix =================#

# cd "$(git rev-parse --show-toplevel)"
# docker run -it \
#            --name nixos-ricenix \
#            --privileged \
#            --volume=${PWD%/*}:/root/.config/dotfiles/winfiles-docker-volume \
#            --volume=/run/user/1000/pipewire-0:/run/user/1000/pipewire-0 \
#            --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#            --env XDG_RUNTIME_DIR=/run/user/1000 \
#            nixos/nix:2.9.2 \
#            bash -uelic '
#              [[ ! -e /root/.config/dotfiles/winfiles ]] && {
#                tty >> /tmp/sixel-
#                cp -r /root/.config/dotfiles/winfiles-docker-volume/winfiles /root/.config/dotfiles/winfiles
#                cd /root/.config/dotfiles/winfiles/wslfiles/.local/bin
#                SUDO=false ROOTCHECK=false ./RiceNix
#              }
#              chmod g+w /dev/pts/0
#              cd ~
#              zsh -l
#            '

#======== Post-Install: ubuntu-nix arch-nix nixos-nix ========#

# exit on error:
set -eu

# check for non-root user:
if [ "${ROOTCHECK:-}" = false ]; then
  printf "\e[1;33m skipping root check verification \e[0m\n"
else
  [ "$(id -u)" == 0 ] && printf "\e[1;31mRun it as non-root user, nix-env doesn't suport root\e[0m\n" >&2 && exit 1
fi

# ask for sudo password at the beggining (last for 15 min):
[ ${SUDO:-} = false ] && export SUDO=" " || export SUDO="sudo"
$SUDO true

# Arch dependencies:
[ -e /etc/pacman.d ]&&{
    # sudo pacman -R fakeroot-tcp #WSL
    # sudo pacman -S festival-us
    sudo pacman-key --init
    sudo pacman-key --populate
    sudo pacman -Sy  --noconfirm archlinux-keyring
    [ ! -e /.dockerenv ] && sudo pacman -Syu --noconfirm xf86-input-synaptics cron
    sudo pacman -Syu --noconfirm zsh curl base-devel
    yes | sudo pacman -Scc
  }

# Debian dependencies:
[ -e /etc/apt ]&&{
    sudo apt update
    # sudo apt full-upgrade -y
    # sudo apt install -y festvox-us-slt-hts
    [ ! -e /.dockerenv ] && sudo DEBIAN_FRONTEND=noninteractive apt install -y xserver-xorg-input-synaptics cron
    sudo DEBIAN_FRONTEND=noninteractive apt install -y zsh file curl build-essential
  }

# alternitive install nix-daemon(multiuser):
# yes | sh <(curl -L https://nixos.org/nix/install) --daemon
# sudo nix-daemon &

# install nix (tested version = 22.05):
if [ -e /etc/nix ]; then
  {
    nix-channel --update
    nix-env -iA zsh util-linux sudo psmisc ncurses gnused gawk file cron curl bashInteractive \
            -f https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz
    $SUDO ln -sf /bin/sh /bin/bash
  }
  else
  {
    curl -L https://nixos.org/nix/install | sh
    . "$HOME"/.nix-profile/etc/profile.d/nix.sh
    [ ! -e /.dockerenv ] && {
      nix-channel --add https://github.com/guibou/nixGL/archive/main.tar.gz nixgl
      nix-channel --update
      nix-env -iA nixgl.auto.nixGLDefault
    }
  }
fi

# nixos zsh as a login/default shell:
if [ -e /etc/nixos ]; then
  {
    sudo sed -i '/users.users/a\  shell = pkgs.zsh;'                                /etc/nixos/configuration.nix
    sudo sed -i '/programs.mtr.enable/a\  programs.zsh.enable = true;'              /etc/nixos/configuration.nix
    sudo sed -i '/programs.zsh.enable/a\  security.sudo.wheelNeedsPassword = false;' /etc/nixos/configuration.nix
    sudo sed -i 's/# services.openssh.enable/services.openssh.enable/'              /etc/nixos/configuration.nix
    sudo nixos-rebuild switch
  }
  else
  {
    command -v zsh | $SUDO tee -a /etc/shells
    $SUDO chsh -s "$(which zsh)" "$USER"
  }
fi

#-- Packages excluded on docker
[ ! -e /.dockerenv ] && nix-env -iA \
  dmenu \
  devour \
  kitty \
  light \
  mpc_cli \
  mpd \
  mpvScripts.mpris \
  ncmpcpp \
  playerctl \
  redshift \
  sxhkd \
  xcape \
  xdo \
  xdotool \
  xdragon \
  xorg.xmodmap \
  xorg.xset \
  -f https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz
  # nixpkgs.bspwm \
  # nixpkgs.cron \
  # nixpkgs.mlterm \
  # nixpkgs.polybar \
  # nixpkgs.python310 \
  # nixpkgs.timg \
  # nixpkgs.xorg.xf86inputsynaptics \
  # nixpkgs.xorg.xinit \
  # nixpkgs._3270font \

# install packages:
nix-env -iA \
  bat \
  cht-sh \
  fzf \
  ffmpegthumbnailer \
  gcc11 \
  git \
  less \
  lazygit \
  lf \
  libsixel \
  moreutils \
  mupdf \
  neovim \
  perl534Packages.FileMimeInfo \
  pipewire \
  ripgrep \
  spaceship-prompt \
  stow \
  sxiv \
  trash-cli \
  unzip \
  wezterm \
  xclip \
  zathura \
  zsh-autosuggestions \
  zsh-fast-syntax-highlighting \
  -f https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz

# Dotfiles:
install_dotfiles() {
  # git clone https://gitlab.com/yucrayeff36/winfiles "$HOME"/.config/dotfiles/winfiles
  # cd "$HOME"/.config/dotfiles/winfiles/wslfiles/.local/bin/
  cd "$(git rev-parse --show-toplevel)"/wslfiles
  [ ! -e "$HOME"/.config ]&& mkdir "$HOME"/.config
  [ ! -e "$HOME"/.local ]&& mkdir "$HOME"/.local
  stow --restow --verbose --target="$HOME"/.config .config
  stow --restow --verbose --target="$HOME"/.local .local
  ln -sf "$HOME"/.config/shell/.zprofile "$HOME"/.zprofile
  ln -sf "$HOME"/.config/shell/.xprofile "$HOME"/.xprofile
  mkdir -p "$HOME"/.local/share/mpd
}

# nerd fonts:
install_nerdfonts() {
  mkdir -p "$HOME"/.local/share/fonts
  git clone --filter=blob:none --sparse https://github.com/ryanoasis/nerd-fonts
  cd nerd-fonts
  git sparse-checkout add patched-fonts/3270
  git sparse-checkout add patched-fonts/CascadiaCode
  git sparse-checkout add patched-fonts/Terminus
  cp -r patched-fonts/3270 "$HOME"/.local/share/fonts/
  cp -r patched-fonts/CascadiaCode "$HOME"/.local/share/fonts/
  cp -r patched-fonts/Terminus "$HOME"/.local/share/fonts/
  cd ..

  # bedstead font:
  curl -LO https://bjh21.me.uk/bedstead/bedstead-002.004.zip
  unzip bedstead-002.004.zip -d "$HOME"/.local/share/fonts/
}


# touchcursor:
install_touchcursor() {
  mkdir touchcursor-linux
  cd touchcursor-linux
  git init
  git remote add origin https://github.com/donniebreve/touchcursor-linux
  git fetch --depth=1 origin 775d5db97ff7a9d65965f5d05c338fd5276a7ce7
  git checkout 775d5db
  sed -i "s/systemctl/#systemctl/" Makefile
  sed -i "s/sudo //" Makefile
  nix-shell --pure \
            -I https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz \
            --packages gnumake \
            --command "make && INSTALLPATH=$HOME/.local/bin  make install"
  cd ..
}

# xsixel:
install_xsixel() {
  mkdir xserver-sixel
  cd xserver-sixel
  git init
  git remote add origin https://github.com/saitoha/xserver-sixel
  git fetch --depth=1 origin 7f4af3440cd736942f87ae96d15f7eaa2c1d58a9
  git checkout 7f4af34
  sed -i '/sixel/a\    --disable-xwayland \\' build-xsixel.sh
  sed -i 's|/usr/local|$HOME/.local|' build-xsixel.sh
  sed -i 's|/usr|$HOME/.nix-profile|' build-xsixel.sh
  sed -i 's/gl >= *.*.0/gl >= 1.2.0/g' configure.ac

  # [ ! -e /etc/arch-release ]&& sudo DEBIAN_FRONTEND=noninteractive apt install -y \
  # 	zsh xorg build-essential dh-autoreconf gawk xutils-dev xtrans-dev pkg-config libfontenc-dev \
  # 	libpixman-1-dev libghc-cryptohash-sha1-dev libxkbfile-dev libxau-dev x11proto-dev libsixel-dev \
  # 	&& $(curl -LO https://xorg.freedesktop.org/archive/individual/lib/libXfont-1.5.4.tar.bz2 \
  # 		&& tar xjvf libXfont-1.5.4.tar.bz2 \
  # 		&& cd libXfont-1.5.4 \
  # 		&& ./configure \
  # 		&& sudo make install \
  # 		&& sudo ln -sf /usr/local/lib/libXfont.so.1 /usr/lib/libXfont.so.1) \
  # 	&& ./build-sixel.sh \
  # 	&& sudo make install

  nix-shell --pure \
            -I https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz \
            --packages autoconf automake clang_11 libdrm libGL libmd libsixel nettle pkg-config \
              xorg.fontutil xorg.libX11 xorg.libxkbfile xorg.libXfont xorg.utilmacros xorg.xorgserver xorg.xtrans \
            --command "CC=clang ./build-xsixel.sh && make install"

    if [ -e /etc/nixos ]; then
      nix-env -iA nixos.libmd nixos.xorg.libXfont nixos.xorg.libxshmfence nixos.libsixel nixos.xorg.setxkbmap nixos.xorg.xkbcomp
    else
      nix-env -iA nixpkgs.libmd nixpkgs.xorg.libXfont nixpkgs.xorg.libxshmfence nixpkgs.libsixel nixpkgs.xorg.setxkbmap nixpkgs.xorg.xkbcomp
    fi
  cd ..
}

# mpv-sixel (`unset LD_LIBRARY_PATH` if GLIBC error /bin/mpv):
install_mpv() {
  mkdir mpv
  cd mpv
  git init
  git remote add origin https://github.com/mpv-player/mpv
  git fetch --depth=1 origin 0044c19f0de29ff752eb708365322b0ec16b53e7
  git checkout 0044c19

  # [ ! -e /etc/arch-release ]&& sudo DEBIAN_FRONTEND=noninteractive apt install -y \
  # 	ffmpeg liblua5.2-dev libsixel-dev libpipewire-0.3-dev libass-dev libavutil-dev \
  # 	libavcodec-dev libavformat-dev libgl-dev libswscale-dev libavfilter-dev libswresample-dev \
  # 	&& ./bootstrap.py \
  # 	&& ./waf configure --libdir=/usr/lib/$(DEB_HOST_MULTIARCH) \
  # 	&& ./waf build \
  # 	&& sudo ./waf install

  nix-shell --pure \
            --keep NIX_SSL_CERT_FILE \
            -I https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz \
            --packages ffmpeg libass lua libsixel libGL mesa mujs pipewire pkg-config pulseaudio python310 \
              xorg.libX11 xorg.libXpresent xorg.libXv xorg.libXScrnSaver xorg.libXext xorg.libXinerama xorg.libXrandr zlib \
            --command "NIX_SSL_CERT_FILE=${NIX_SSL_CERT_FILE:-/etc/ssl/certs/ca-certificates.crt} ./bootstrap.py && ./waf configure --prefix=$HOME/.local && ./waf build && ./waf install"

    if [ -e /etc/nixos ]; then
      nix-env -iA nixos.ffmpeg nixos.xorg.libXpresent nixos.libsixel nixos.lua nixos.pulseaudio
    else
      nix-env -iA nixpkgs.ffmpeg nixpkgs.xorg.libXpresent nixpkgs.libsixel nixpkgs.lua nixpkgs.pulseaudio
    fi
  cd ..
}

# user config:
install_configs ()
{
  # systemctl --user enable --now touchcursor
  [ ! -e /etc/X11/xorg.conf.d ]&& $SUDO mkdir -p /etc/X11/xorg.conf.d
  $SUDO cp "$HOME"/.config/shell/10-synaptics.conf /etc/X11/xorg.conf.d
  [ -x "$(command -v crontab)" ] && $SUDO crontab "$HOME"/.local/bin/cron/lowbatnotificationcron
  rm -rf {bedstead-002.004.zip,nerd-fonts,touchcursor-linux,xserver-sixel,mpv}
  [ ! -e "$HOME"/.cache/zsh ]&& mkdir "$HOME"/.cache/zsh
  nix-collect-garbage -d

  # pipewire:
  # echo "export DISPLAY=localhost:0.0" >>"$HOME"/.zprofile #WSL
  # echo "export PULSE_SERVER=tcp:localhost" >>"$HOME"/.zprofile #WSL
  # echo "export XDG_RUNTIME_DIR=/run/user/1000" >>"$HOME"/.zprofile #Docker Audio

  # # blacklisting beep sound (there is no beep in docker):
  # sudo rmmod pcspkr
  # echo "blacklist pcspkr" | sudo tee /etc/modprobe.d/nobeep.conf

}

# neovim version 7 (appimage-run nvim.appimage on NIXOS):
install_neovim() {
  # curl -Lo "$HOME"/.local/bin/nvim https://github.com/neovim/neovim/releases/download/v0.7.2/nvim.appimage && chmod +x "$HOME"/.local/bin/nvim
  git clone --depth=1 --branch v0.7.2 --single-branch https://github.com/neovim/neovim
  cd neovim
  nix-shell --pure \
            -I https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz \
            --packages autoconf automake cmake curl gettext libtermkey libtool lua perl pkg-config unibilium unzip \
            --command "make CMAKE_BUILD_TYPE=Release CMAKE_INSTALL_PREFIX=$HOME/.local && make install"
  cd ..
}

# install neovim plugins  $(ulimit -n 4096):
install_neovim_plugins() {
  git clone --depth 1 https://github.com/wbthomason/packer.nvim "$HOME"/.local/share/nvim/site/pack/packer/start/packer.nvim
  nvim -u "$HOME"/.config/nvim/lua/user/plugins.lua --headless -c "autocmd User PackerComplete quitall" -c "PackerSync"
}

install_dotfiles                             #|| echo $(tput -T ansi setaf 1) install_dotfiles failed
[ ! -e /.dockerenv ] && install_nerdfonts    #|| echo $(tput -T ansi setaf 1) install_nerdfonts failed
[ ! -e /.dockerenv ] && install_touchcursor  #|| echo $(tput -T ansi setaf 1) install_touchcursor failed
install_xsixel                               #|| echo $(tput -T ansi setaf 1) install_xsixel failed
install_mpv                                  #|| echo $(tput -T ansi setaf 1) install_mpv failed
install_configs                              #|| echo $(tput -T ansi setaf 1) install_configs failed
# install_neovim                             #|| echo $(tput -T ansi setaf 1) install_neovim failed
install_neovim_plugins                       #|| echo $(tput -T ansi setaf 1) install_neovim_plugins failed

printf "\e[1;32m ln -sf ~/.config/shell/.xprofile ~/.xsessionrc #if lightDM (xfce) \e[0m\n"
printf "\e[1;32m Done! \e[0m\n"
