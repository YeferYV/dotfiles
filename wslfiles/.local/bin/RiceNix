#!/usr/bin/env bash

#=================== Docker Build Archrice ===================#

# cd ../../..
# docker run -it \
#            --name archrice \
#            --privileged \
#            --volume=$(pwd):/root/.config/dotfiles/winfiles-docker-volume \
#            --volume=/run/user/1000/pipewire-0:/run/user/1000/pipewire-0 \
#            --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#            archlinux:base-devel \
#            bash -uelic '
#              pacman-key --init
#              pacman-key --populate
#              pacman -Sy  --noconfirm archlinux-keyring
#              pacman -Syu --noconfirm sudo
#              useradd -mG wheel drksl
#              echo root:toor | chpasswd
#              echo drksl:toor | chpasswd
#              echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel
#              mkdir -p /home/drksl/.config/dotfiles
#              cp -r /root/.config/dotfiles/winfiles-docker-volume /home/drksl/.config/dotfiles/winfiles
#              chown -R drksl:drksl /home/drksl/.config
#              chown -R drksl:drksl /run/user/1000
#              sudo -u "drksl" bash -c "cd ~/.config/dotfiles/winfiles/wslfiles/.local/bin && ./RiceNix"
#              chmod g+w /dev/pts/0
#              su - drksl
#            '

#================== Docker Build Ubunturice ==================#

# cd ../../..
# docker run -it \
#            --name ubunturice \
#            --privileged \
#            --volume=$(pwd):/root/.config/dotfiles/winfiles-docker-volume \
#            --volume=/run/user/1000/pipewire-0:/run/user/1000/pipewire-0 \
#            --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#            ubuntu:devel \
#            bash -uelic '
#              apt update
#              DEBIAN_FRONTEND=noninteractive apt install -y sudo
#              useradd -mG sudo,tty drksl
#              echo root:toor | chpasswd
#              echo drksl:toor | chpasswd
#              echo "%sudo ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel
#              sed -i "s/Defaults/#Defaults/g" /etc/sudoers
#              mkdir -p /home/drksl/.config/dotfiles
#              cp -r /root/.config/dotfiles/winfiles-docker-volume /home/drksl/.config/dotfiles/winfiles
#              chown -R drksl:drksl /home/drksl/.config
#              chown -R drksl:drksl /run/user/1000
#              sudo -u "drksl" bash -c "cd ~/.config/dotfiles/winfiles/wslfiles/.local/bin && ./RiceNix"
#              chmod g+w /dev/pts/0
#              su - drksl
#            '

#==================== Docker Build Nixrice ===================#

# cd ../../..
# docker run -it \
#            --name nixrice \
#            --privileged \
#            --volume=$(pwd):/root/.config/dotfiles/winfiles-docker-volume \
#            --volume=/run/user/1000/pipewire-0:/run/user/1000/pipewire-0 \
#            --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#            nixos/nix:2.9.2 \
#            bash -uelic '
#              cp -r /root/.config/dotfiles/winfiles-docker-volume /root/.config/dotfiles/winfiles
#              chown -R root:root /root/.config/dotfiles/winfiles
#              chown -R root:root /run/user/1000
#              cd /root/.config/dotfiles/winfiles/wslfiles/.local/bin
#              SUDO=false ROOTCHECK=false ./RiceNix
#              zsh -l
#            '

#================== Post-Install (dotfiles) ==================#

# exit on error
set -eu

# check for non-root user
if [ "${ROOTCHECK:-}" = false ]; then
  printf "\e[1;33m skipping root check verification \e[0m\n"
else
  [ "$(id -u)" == 0 ] && printf "\e[1;31mRun it as non-root user, nix-env doesn't suport root\e[0m\n" >&2 && exit 1
fi

# ask for sudo password at the beggining (last for 15 min)
[ ${SUDO:-} = false ] && export SUDO=" " || export SUDO="sudo"
$SUDO true

# Arch dependencies
[ -e /etc/pacman.d ]&&{
    # sudo pacman -R fakeroot-tcp #WSL
    # sudo pacman -S festival-us
    sudo pacman-key --init
    sudo pacman-key --populate
    sudo pacman -Sy  --noconfirm archlinux-keyring
    sudo pacman -Syu --noconfirm zsh xf86-input-synaptics curl cron base-devel
  }

# Debian dependencies
[ -e /etc/apt ]&&{
    sudo apt update
    # sudo apt full-upgrade -y
    # sudo apt install -y festvox-us-slt-hts
    sudo DEBIAN_FRONTEND=noninteractive apt install -y zsh xserver-xorg-input-synaptics file curl cron build-essential
  }

# alternitive install nix-daemon(multiuser)
# yes | sh <(curl -L https://nixos.org/nix/install) --daemon
# sudo nix-daemon &

# install nix (tested version = 22.05)
if [ -e /etc/nix ]; then
  {
    nix-channel --update
    nix-env -iA zsh util-linux sudo psmisc ncurses gnused gawk file cron curl bashInteractive \
            -f https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz
    $SUDO ln -sf /bin/sh /bin/bash
  }
  else
  {
    curl -L https://nixos.org/nix/install | sh
    . "$HOME"/.nix-profile/etc/profile.d/nix.sh
    nix-channel --add https://github.com/guibou/nixGL/archive/main.tar.gz nixgl
    nix-channel --update
    nix-env -iA nixgl.auto.nixGLDefault
  }
fi

# nixos zsh as a login/default shell
if [ -e /etc/nixos ]; then
  {
    sudo sed -i '/users.users/a\  shell = pkgs.zsh;'                                /etc/nixos/configuration.nix
    sudo sed -i '/programs.mtr.enable/a\  programs.zsh.enable = true;'              /etc/nixos/configuration.nix
    sudo sed -i '/programs.zsh.enable/a\  security.sudo.wheelNeedsPassword = false;' /etc/nixos/configuration.nix
    sudo sed -i 's/# services.openssh.enable/services.openssh.enable/'              /etc/nixos/configuration.nix
    sudo nixos-rebuild switch
  }
  else
  {
    command -v zsh | $SUDO tee -a /etc/shells
    $SUDO chsh -s "$(which zsh)" "$USER"
  }
fi

# install packages
nix-env -iA \
  bat \
  cht-sh \
  dmenu \
  devour \
  fzf \
  ffmpegthumbnailer \
  gcc11 \
  git \
  kitty \
  less \
  lazygit \
  libsixel \
  light \
  lf \
  lua \
  moreutils \
  mpc_cli \
  mpd \
  mupdf \
  mpvScripts.mpris \
  ncmpcpp \
  neovim \
  nodejs-16_x \
  perl534Packages.FileMimeInfo \
  pipewire \
  playerctl \
  pulseaudio \
  python310Packages.pip \
  redshift \
  ripgrep \
  spaceship-prompt \
  stow \
  sxhkd \
  sxiv \
  trash-cli \
  unzip \
  wezterm \
  xcape \
  xclip \
  xdo \
  xdotool \
  xdragon \
  xorg.libXfont \
  xorg.setxkbmap \
  xorg.xkbcomp \
  xorg.xmodmap \
  xorg.xorgserver \
  xorg.xset \
  zathura \
  zsh-autosuggestions \
  zsh-fast-syntax-highlighting \
  -f https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz
  # nixpkgs.bspwm \
  # nixpkgs.cron \
  # nixpkgs.mlterm \
  # nixpkgs.python310 \
  # nixpkgs.timg \
  # nixpkgs.xorg.xf86inputsynaptics \
  # nixpkgs.xorg.xinit \
  # nixpkgs._3270font \

# dotfiles
# git clone https://gitlab.com/yucrayeff36/winfiles "$HOME"/.config/dotfiles/winfiles
# cd "$HOME"/.config/dotfiles/winfiles/wslfiles/.local/bin/
cd "$(git rev-parse --show-toplevel)"/wslfiles
[ ! -e "$HOME"/.config ]&& mkdir "$HOME"/.config
[ ! -e "$HOME"/.local ]&& mkdir "$HOME"/.local
stow --restow --verbose --target="$HOME"/.config .config
stow --restow --verbose --target="$HOME"/.local .local
ln -sf "$HOME"/.config/shell/.zprofile "$HOME"/.zprofile
ln -sf "$HOME"/.config/shell/.xprofile "$HOME"/.xprofile
mkdir -p "$HOME"/.local/share/mpd

# nerd fonts
mkdir -p "$HOME"/.local/share/fonts
git clone --filter=blob:none --sparse https://github.com/ryanoasis/nerd-fonts
cd nerd-fonts
git sparse-checkout add patched-fonts/3270
git sparse-checkout add patched-fonts/CascadiaCode
git sparse-checkout add patched-fonts/Terminus
cp -r patched-fonts/3270 "$HOME"/.local/share/fonts/
cp -r patched-fonts/CascadiaCode "$HOME"/.local/share/fonts/
cp -r patched-fonts/Terminus "$HOME"/.local/share/fonts/
cd ..

# bedstead font
curl -LO https://bjh21.me.uk/bedstead/bedstead-002.004.zip
unzip bedstead-002.004.zip -d "$HOME"/.local/share/fonts/

# # neovim version 7 (appimage-run nvim.appimage on NIXOS)
# curl -Lo "$HOME"/.local/bin/nvim https://github.com/neovim/neovim/releases/download/v0.7.2/nvim.appimage && chmod +x "$HOME"/.local/bin/nvim
# git clone --depth=1 --branch v0.7.2 --single-branch https://github.com/neovim/neovim
# cd neovim
# nix-shell --pure \
#           -I https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz \
#           --packages autoconf automake cmake curl gettext libtermkey libtool lua perl pkg-config unibilium unzip \
#           --command "make CMAKE_BUILD_TYPE=Release CMAKE_INSTALL_PREFIX=$HOME/.local && make install"
# cd ..

# touchcursor
mkdir touchcursor-linux
cd touchcursor-linux
git init
git remote add origin https://github.com/donniebreve/touchcursor-linux
git fetch --depth=1 origin 775d5db97ff7a9d65965f5d05c338fd5276a7ce7
git checkout 775d5db
sed -i "s/systemctl/#systemctl/" Makefile
sed -i "s/sudo //" Makefile
nix-shell --pure \
          -I https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz \
          --packages gnumake \
          --command "make && INSTALLPATH=$HOME/.local/bin  make install"
cd ..

# xsixel
mkdir xserver-sixel
cd xserver-sixel
git init
git remote add origin https://github.com/saitoha/xserver-sixel
git fetch --depth=1 origin 7f4af3440cd736942f87ae96d15f7eaa2c1d58a9
git checkout 7f4af34
sed -i '/sixel/a\    --disable-xwayland \\' build-xsixel.sh
sed -i 's|/usr/local|$HOME/.local|' build-xsixel.sh
sed -i 's|/usr|$HOME/.nix-profile|' build-xsixel.sh
sed -i 's/gl >= *.*.0/gl >= 1.2.0/g' configure.ac

# [ ! -e /etc/arch-release ]&& sudo DEBIAN_FRONTEND=noninteractive apt install -y \
# 	zsh xorg build-essential dh-autoreconf gawk xutils-dev xtrans-dev pkg-config libfontenc-dev \
# 	libpixman-1-dev libghc-cryptohash-sha1-dev libxkbfile-dev libxau-dev x11proto-dev libsixel-dev \
# 	&& $(curl -LO https://xorg.freedesktop.org/archive/individual/lib/libXfont-1.5.4.tar.bz2 \
# 		&& tar xjvf libXfont-1.5.4.tar.bz2 \
# 		&& cd libXfont-1.5.4 \
# 		&& ./configure \
# 		&& sudo make install \
# 		&& sudo ln -sf /usr/local/lib/libXfont.so.1 /usr/lib/libXfont.so.1) \
# 	&& ./build-sixel.sh \
# 	&& sudo make install

nix-shell --pure \
          -I https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz \
          --packages autoconf automake clang_11 libdrm libGL libmd libsixel nettle pkg-config \
            xorg.fontutil xorg.libX11 xorg.libxkbfile xorg.libXfont xorg.utilmacros xorg.xorgserver xorg.xtrans \
          --command "CC=clang ./build-xsixel.sh && make install"
cd ..

# mpv-sixel (unset LD_LIBRARY_PATH if GLIBC error (/bin/mpv))
mkdir mpv
cd mpv
git init
git remote add origin https://github.com/mpv-player/mpv
git fetch --depth=1 origin 0044c19f0de29ff752eb708365322b0ec16b53e7
git checkout 0044c19

# [ ! -e /etc/arch-release ]&& sudo DEBIAN_FRONTEND=noninteractive apt install -y \
# 	ffmpeg liblua5.2-dev libsixel-dev libpipewire-0.3-dev libass-dev libavutil-dev \
# 	libavcodec-dev libavformat-dev libgl-dev libswscale-dev libavfilter-dev libswresample-dev \
# 	&& ./bootstrap.py \
# 	&& ./waf configure --libdir=/usr/lib/$(DEB_HOST_MULTIARCH) \
# 	&& ./waf build \
# 	&& sudo ./waf install

nix-shell --pure \
          --keep NIX_SSL_CERT_FILE \
          -I https://github.com/NixOS/nixpkgs/archive/09066922296d9ef06bfadb937b2560524dd10785.tar.gz \
          --packages ffmpeg libass lua libsixel libGL mesa mujs pipewire pkg-config pulseaudio python310 \
	  	      xorg.libX11 xorg.libXv xorg.libXScrnSaver xorg.libXext xorg.libXinerama xorg.libXrandr zlib \
          --command "NIX_SSL_CERT_FILE=${NIX_SSL_CERT_FILE:-/etc/ssl/certs/ca-certificates.crt} ./bootstrap.py && ./waf configure --prefix=$HOME/.local && ./waf build && ./waf install"
cd ..

# pipewire:
# echo "export DISPLAY=localhost:0.0" >>"$HOME"/.zprofile #WSL
# echo "export PULSE_SERVER=tcp:localhost" >>"$HOME"/.zprofile #WSL
# echo "export XDG_RUNTIME_DIR=/run/user/1000" >>"$HOME"/.zprofile #Docker Audio

# user config
# systemctl --user enable --now touchcursor
[ ! -e /etc/X11/xorg.conf.d ]&& $SUDO mkdir -p /etc/X11/xorg.conf.d
$SUDO cp "$HOME"/.config/shell/10-synaptics.conf /etc/X11/xorg.conf.d
$SUDO crontab "$HOME"/.local/bin/cron/lowbatnotificationcron
rm -rf {bedstead-002.004.zip,nerd-fonts,touchcursor-linux,xserver-sixel,mpv}
[ ! -e "$HOME"/.cache/zsh ]&& mkdir "$HOME"/.cache/zsh
nix-collect-garbage -d

# # blacklisting beep sound (there is no beep in docker)
# sudo rmmod pcspkr
# echo "blacklist pcspkr" | sudo tee /etc/modprobe.d/nobeep.conf

# install neovim plugins  $(ulimit -n 4096)
git clone --depth 1 https://github.com/wbthomason/packer.nvim "$HOME"/.local/share/nvim/site/pack/packer/start/packer.nvim
nvim -u "$HOME"/.config/nvim/lua/user/plugins.lua --headless -c "autocmd User PackerComplete quitall" -c "PackerSync"

printf "\e[1;32m ln -sf ~/.config/shell/.xprofile ~/.xsessionrc #if lightDM (xfce) \e[0m\n"
printf "\e[1;32m Done! \e[0m\n"
