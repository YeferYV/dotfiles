#
# wm independent hotkeys
#

# terminal emulator
super + {_,shift +,ctrl + }Return
	{ \
	  nixGL wezterm --config initial_rows=47 --config initial_cols=169; \
	, nixGL wezterm --config initial_rows=25 --config initial_cols=85; \
	, nixGL wezterm --config "window_decorations='NONE'" ; \
	}

# terminal emulator
mod1 + {_,shift +,ctrl + }Return
  {nixGL kitty, nixGL alacritty,cool-retro-term}

# borderless window
super + alt + b
  borderless

# dunst close/reopen notification
ctrl + {_,shift + }Return
	dunstctl {close, history-pop}

# stop cronbat
super + Escape
  ps aux | grep cronbat | awk '\{print $2\}' | xargs kill -9 & dunstctl close

# make sxhkd reload its configuration files:
super + shift + Escape
	pkill -USR1 -x sxhkd

#
# window-manager
#

# xdo close
super + x
	xdo close

# toggle fullscreen
super + {e,d}
  xdotool windowstate --{add,remove}=FULLSCREEN $(xdo id)

# toggle maximized window
super + m
  xdotool windowstate --toggle=MAXIMIZED_HORZ $(xdo id); \
  xdotool windowstate --toggle=MAXIMIZED_VERT $(xdo id);

# focus/send to the given desktop
super + {_,shift + }{1-9,0,minus,equal}
	xdotool {set_desktop, getactivewindow set_desktop_for_window} '{0-9,10,11}'

# focus relative desktop
super + {s,f}
	xdotool set_desktop --relative -- {-1,1}

# swap relative desktop
super + shift + {s,f}
  { sign="-", sign="+" }; \
  xdotool getactivewindow set_desktop_for_window $(($(xdotool get_desktop) $sign 1)) && xdotool set_desktop --relative -- "$sign"1

# rofi drun
super + ctrl + d
  A='rofimoji --action clipboard copy print --files fontawesome nerd_font gitmoji emojis latin-1'; \
  COL=10 \
  ICON=10% \
  ENTRY=true \
  SWITCHER=true \
  XDG_DATA_DIRS=$HOME/.nix-profile/share:/usr/local/share:/usr/share:$HOME/.local/share:$XDG_DATA_DIRS \
  rofi -modi "window,run,drun,emoji:$A,ssh" -show drun

# rofi emoji
super + {alt,ctrl} + e
  LOCALE_ARCHIVE=/lib/locale/locale-archive \
  rofimoji \
    --action clipboard copy print \
    { \
      --selector-args="-theme ~/.config/rofi/unicode.rasi -theme-str 'window \{width:90%; height:50%;\}' " \
      --files all \
    , --selector-args="-theme ~/.config/rofi/unicode.rasi" \
      --files fontawesome nerd_font gitmoji emojis latin-1 \
    }

# rofi focus last window
XF86DOS
  RHEIGHT=33% \
  LOCALE_ARCHIVE=/lib/locale/locale-archive \
  rofi \
    -show window  -window-thumbnail -show-icons \
    -kb-cancel "Escape" \
    -kb-accept-entry "!space,Return" \
    -selected-row 1; \
  xdotool search --sync --class Rofi key --delay 0 --clearmodifiers space;

# xdo focus last window
{shift + space, super + semicolon}
  WINID=$(xdo id | tr '[:upper:]' '[:lower:]' | sed -r 's/^0x0+/0x/g'); \
  WINDOWS=($(xprop -root _NET_CLIENT_LIST_STACKING | cut -d"#" -f2 | tr "," " " | sed -r "s/$WINID.*//g")); \
  xdo activate $\{WINDOWS[-1]\}
  # IDS=($((xdo id -D; xdo id -d) | tr "\n" " ")) && xdo activate $\{IDS[-2]\}

# fzf alt-tab
super + alt + z
  nixGL wezterm --config "window_decorations='NONE'" start --always-new-process -- bash -c \
  'test=$((xdo id -D & xdo id -d) | xargs -I var xprop -id var _NET_WM_NAME | cut -d"\"" -f2 | fzf); xdo activate $( xdo id -a "$test");'

# rofi alt-tab like
super + Tab
  N=$((xdo id -D & xdo id -d) | wc -w); \
  [ $N -le 5 ]&& export RWIDTH="$((N * 20))%" RHEIGHT=33%; \
  [[ 6 -le $N && $N -le 10 ]]&& export RHEIGHT=66%; \
  rofi -show window \
    -kb-accept-entry "!Super-Tab,!Super_L,!Super+Super_L,Return" \
    -kb-row-right "Super+Tab,Super+l" \
    -kb-row-up "Super+k" \
    -kb-row-down "Super+j" \
    -kb-row-left "Super+ISO_Left_Tab,Super+h"& \
  xdotool keyup Tab; \
  xdotool key Tab

# increase/decrease window size (zoom in/out)
super + alt + {i,o}
  DECORATION_SIZE=$(xprop -id $(xdo id) | awk '/_NET_FRAME/ \{ print $5 \}' | awk -F',' '\{ print $1\}'); \
  BORDER_SIZE=$(xprop -id $(xdo id) | awk '/_NET_FRAME/ \{ print $4 \}' | awk -F',' '\{ print $1\}'); \
	{ \
	  xdotool getactivewindow windowmove --relative -- -$((50 + BORDER_SIZE)) -$((25 + DECORATION_SIZE)) ; xdo resize -w +100 -h +50; \
	, xdotool getactivewindow windowmove --relative -- +$((50 - BORDER_SIZE)) +$((25 - DECORATION_SIZE)) ; xdo resize -w -100 -h -50; \
	}

# hover window to left/down/up/right
super + alt + shift + {u,i,o,p}
  xprop -id $(xdo id) | awk -F',' '/_NET_FRAME/ \{print $2" "$3\}' | read B D;\
  xprop -root _NET_WORKAREA  | awk -F ',' '\{print $2\}' | xargs -I var echo "(var + 1)/2" | bc | read S;\
  xdotool getdisplaygeometry | awk '\{print $1" "$2\}' | read W H;\
	{ \
    w=$((W / 2 - 1)); h=$H; x=0; y=0;\
  , w=$W; h=$((H / 2 - S - D)); x=0; y=$((H / 2 + S));\
  , w=$W; h=$((H / 2 - S - D)); x=0; y=0;\
  , w=$((W / 2    )); h=$H; x=$((W / 2)); y=0;\
	} \
  xdo resize -w $w -h $h; xdo move -x $x -y $y

# move floating window by 10px
super + alt + {h,j,k,l}
  DECORATION_SIZE=$(xprop -id $(xdo id) | awk '/_NET_FRAME/ \{ print $5 \}' | awk -F',' '\{ print $1\}'); \
  BORDER_SIZE=$(xprop -id $(xdo id) | awk '/_NET_FRAME/ \{ print $4 \}' | awk -F',' '\{ print $1\}'); \
  xdotool getactivewindow windowmove --relative -- \
  { \
     $((-10 - BORDER_SIZE)) -$DECORATION_SIZE ; \
  , -$BORDER_SIZE $((-DECORATION_SIZE + 10)) ; \
  , -$BORDER_SIZE $((-DECORATION_SIZE - 10)) ; \
  ,  $((10 - BORDER_SIZE)) -$DECORATION_SIZE ; \
  }

# hover window to corner
super + alt + shift + {h,j,k,l}
  xprop -id $(xdo id) | awk -F',' '/_NET_FRAME/ \{print $2" "$3\}' | read BORDER DECORATION; \
  xdotool getwindowfocus getwindowgeometry | awk -F'x' '/Geometry/ \{print $1" "$2\}' | read G W H; \
  xdotool getdisplaygeometry | awk '\{print $1" "$2\}' | read W_SCREEN H_SCREEN; \
  xdotool getactivewindow windowmove --relative -- -$((BORDER + BORDER)) -$((DECORATION + DECORATION)) &&\
  xdotool getactivewindow windowmove \
	{ \
		0% y; \
	, x $((H_SCREEN - H - DECORATION)); \
	, x 0%; \
	, $((W_SCREEN - W - BORDER - BORDER)) y; \
	}

# increase/expand/grow window edges by 10px
super + alt + {m,comma,period,slash}
  xprop -id $(xdo id) | awk -F',' '/_NET_FRAME/ \{print $2" "$3\}' | read BORDER DECORATION; \
	{ \
    xdotool getactivewindow windowmove --relative -- $((-10 - BORDER)) -$DECORATION; xdo resize -w +10; \
  ,                                                                                  xdo resize -h +10; \
  ,	xdotool getactivewindow windowmove --relative -- -$BORDER $((-DECORATION - 10)); xdo resize -h +10; \
  ,                                                                                  xdo resize -w +10; \
	}

# decrease/contract/shrink window edges by 10px
super + alt + shift + {m,comma,period,slash}
  xprop -id $(xdo id) | awk -F',' '/_NET_FRAME/ \{print $2" "$3\}' | read BORDER DECORATION; \
	{ \
    xdotool getactivewindow windowmove --relative --  $((10 - BORDER)) -$DECORATION; xdo resize -w -10; \
	,                                                                                  xdo resize -h -10; \
  , xdotool getactivewindow windowmove --relative -- -$BORDER $((-DECORATION + 10)); xdo resize -h -10; \
	,	                                                                                 xdo resize -w -10; \
	}

# xdo fixedscreen 75%/50% (medium/small)
super + alt + {_,shift + } n
  xprop -id $(xdo id) | awk -F',' '/_NET_FRAME/ \{print $2" "$3\}' | read B D;\
  xprop -root _NET_WORKAREA  | awk -F ',' '\{print $2\}' | xargs -I var echo "(var + 1)/2" | bc | read S;\
  xdotool getdisplaygeometry | awk '\{print $1" "$2\}' | read W H;\
  { \
    xdotool getactivewindow windowsize 75% 75%; \
  , xdo resize -w $((W / 2 - B)) -h $((H / 2 - S - D)); \
  }

# xdo fixedscreen 1366x768 (min-max window)
super + {_,shift + }n
  xdotool windowstate --toggle=MAXIMIZED_VERT $(xdo id); \
  { \
	  xdotool getactivewindow windowsize 100% y; \
	, xdotool getactivewindow windowsize 80% y windowmove 20% x; \
  }

########################################
###      alphabetic_hotkeys          ###
#######################################

# signs
#F{1,2,3,4,5,6,7,8,9,10}
#	xdotool key {exclam,at,numbersign,dollar,percent,asciicircum,ampersand,asterisk,parenleft,parenright}

# super/alt click
{XF86Finance,XF86Game}
  xdotool click {1,2}

# mouse scroll
XF86Launch{8,9}
  xdotool click {4,5}

# super volume
super + XF86Audio{Raise,Lower}Volume
  pactl set-sink-volume @DEFAULT_SINK@ {+,-}5%

# volume
XF86Audio{Raise,Lower}Volume
  pactl set-sink-volume @DEFAULT_SINK@ {+,-}2%

# (un)mute audio
XF86AudioMute
  pactl set-sink-mute @DEFAULT_SINK@ toggle

# (un)mute mic
XF86AudioMicMute
  pactl set-source-mute @DEFAULT_SOURCE@ toggle

# backlight
XF86MonBrightness{Down,Up}
  light -{U,A} .11

# super backlight
super + XF86MonBrightness{Down,Up}
  light -{U,A} 2

# dimmer
shift + XF86MonBrightness{Down,Up}
  xcalib {-co 75 -a,-c}

# dmenu(u)mount
super + {F11,F12}
  {dmenumount,dmenuumount}

# chromium next-toggle-prev
super + KP_{Right,Begin,Left}
  playerctl --player=chromium {next,play-pause,previous}

# chromium play-pause
XF86Launch{1,4}
  playerctl --player=chromium play-pause

# chromium rewind-forward
XF86Launch{2,3}
	playerctl --player=chromium position {5-,5+}

# chromium play-pause
XF86Shop
  playerctl --player=chromium play-pause

# mpv next-toggle-prev
mod1 + KP_{Right,Begin,Left}
  playerctl --player=mpv {next,play-pause,previous}

# mpv vol (down,up)
mod1 + KP_{Down,Up}
	{ \
	  playerctl --player=mpv volume 0.1-; \
	, [[ "$(playerctl -p mpv volume)" < 1 ]]&& playerctl --player=mpv volume 0.1+; \
	}

# spotify next-toggle-prev
ctrl + KP_{Right,Begin,Left}
  playerctl --player=spotify {next,play-pause,previous}

# spotify vol (down/up)
ctrl + KP_{Down,Up}
	{ \
		playerctl --player=spotify volume 0.1-; \
	, [[ "$(playerctl -p spotify volume)" < 1 ]]&& playerctl --player=spotify volume 0.1+; \
	}

# mpc next-toggle-prev-vol
KP_{Right,Begin,Left,Down,Up}
  mpc --port=6601 {next,toggle,prev,volume -2,volume +2}

# mpc next-toggle-prev
mod1 + XF86Audio{RaiseVolume,Mute,LowerVolume}
  mpc --port=6601 {next,toggle,prev}

# screenshot (fullscreen,_)
{super,alt} + Print
	maimpick {fullscreen,_}

# redshift
mod1 + ctrl + {1,2,3,4,5}
  redshift {-x, -O 2222, -O 3333, -O 4444, -O 5555}

# compositor start/end
super + BackSpace
	{\
    nixGL \
		picom --glx-no-rebind-pixmap \
        --use-damage \
        --xrender-sync-fence \
        --backend glx \
        --transparent-clipping \
        # --active-opacity=0.90 \
        # --inactive-opacity=0.90 \
        # --refresh-rate 30\
				,\
    killall picom\
	}

# compositor keep background
super + ctrl + BackSpace
	{ nixGL picom --opacity-rule="90:class_g *= 'wezterm'" --frame-opacity=0.9, killall picom}

# compositor decrease/increase transparency
super + ctrl + {minus,equal}
  xdo id -d -c | xargs -I id -n 1 picom-trans -w id {-2,+4}
  # xdo pid $ID  		# xdotool getactivewindow getwindowpid
  # xdo id -p $PID  # xdotool getactivewindow

# TextToSpeech
super + {_,shift,ctrl} + Next
  {xclip -o | mimic, xsel -b | festival --tts, killall mimic festival}

# browser media
super + shift + b
  nixGL wezterm start ncmpcpp

# dmenu launcher
super + {_,shift +,alt +} p
	{ \
		dmenu_run; \
	, wezterm start $(dmenu_path | dmenu); \
  , source $HOME/.config/shell/aliasrc && \
		alias | dmenu -i -l 10 | awk -F'=' '\{print $2\}' | xargs -I_ wezterm start -- bash -c "_"; \
	}

# lf user/root
super + {_,shift +} r
	{LF_CD=true nixGL wezterm, sudo -i LF_CD=true LS_COLORS="" nixGL wezterm}

# browser
super + {_,shift +} w
  { google-chrome-stable --process-per-site, killall chrome}

# toggle background
super + alt + ctrl + w
  (printf "\x1b]11;{#0c0c0c,#000000}\x1b\\\\") > $(find /dev/pts -iname '[0-9]')

# pywal background
super + alt + {_, shift +} w
  wal { --theme random, -i "$HOME/.config/wallhaven-4lokdp.jpg" -b "0c0c0c"}

# pywal wallpaper
super + ctrl + {_, shift +} w
  wal { -i "$HOME/bgs/bgi/eyelust/eyelust" , -R }
